{"version":3,"sources":["dialog.js"],"names":["define","langx","modals","dialog","options","sanitize","$","templates","innerDialog","find","body","buttons","buttonStr","callbacks","onEscape","undefined","fn","modal","Error","each","key","button","className","label","callback","html","message","animate","addClass","size","title","before","header","closeButton","prepend","css","prependTo","length","after","footer","on","e","target","this","remove","focus","backdrop","children","currentTarget","get","trigger","processCallback","callbackKey","data","which","container","append","keyboard","show"],"mappings":";;;;;;;AAAAA,QACC,sBACA,YACC,SAASC,EAAMC,GA2Mf,OAAOA,EAAOC,OAzMd,SAAgBC,GACdA,EAAUC,SAASD,GAEnB,IAAID,EAASG,EAAEC,UAAUJ,QACrBK,EAAcL,EAAOM,KAAK,iBAC1BC,EAAOP,EAAOM,KAAK,eACnBE,EAAUP,EAAQO,QAClBC,EAAY,GACZC,GACFC,SAAUV,EAAQU,UAGpB,QAAmBC,IAAfT,EAAEU,GAAGC,MACP,MAAM,IAAIC,MACR,gKAmCJ,GA7BAC,KAAKR,EAAS,SAASS,EAAKC,GAK1BT,GAAa,4BAA8BQ,EAAM,8BAAgCC,EAAOC,UAAY,KAAOD,EAAOE,MAAQ,YAC1HV,EAAUO,GAAOC,EAAOG,WAG1Bd,EAAKD,KAAK,gBAAgBgB,KAAKrB,EAAQsB,UAEf,IAApBtB,EAAQuB,SACVxB,EAAOyB,SAAS,QAGdxB,EAAQkB,WACVnB,EAAOyB,SAASxB,EAAQkB,WAGL,UAAjBlB,EAAQyB,KACVrB,EAAYoB,SAAS,YACK,UAAjBxB,EAAQyB,MACjBrB,EAAYoB,SAAS,YAGnBxB,EAAQ0B,OACVpB,EAAKqB,OAAOxB,UAAUyB,QAGpB5B,EAAQ6B,YAAa,CACvB,IAAIA,EAAc3B,EAAEC,UAAU0B,aAE1B7B,EAAQ0B,MACV3B,EAAOM,KAAK,iBAAiByB,QAAQD,GAErCA,EAAYE,IAAI,aAAc,SAASC,UAAU1B,GA6IrD,OAzIIN,EAAQ0B,OACV3B,EAAOM,KAAK,gBAAgBgB,KAAKrB,EAAQ0B,OAGvClB,EAAUyB,SACZ3B,EAAK4B,MAAM/B,UAAUgC,QACrBpC,EAAOM,KAAK,iBAAiBgB,KAAKb,IAUpCT,EAAOqC,GAAG,kBAAmB,SAASC,GAIhCA,EAAEC,SAAWC,MACfxC,EAAOyC,WAeXzC,EAAOqC,GAAG,iBAAkB,WAC1BrC,EAAOM,KAAK,sBAAsBoC,UASX,WAArBzC,EAAQ0C,UASV3C,EAAOqC,GAAG,yBAA0B,SAASC,GAGvCtC,EAAO4C,SAAS,mBAAmBV,SACrCI,EAAEO,cAAgB7C,EAAO4C,SAAS,mBAAmBE,IAAI,IAGvDR,EAAEC,SAAWD,EAAEO,eAInB7C,EAAO+C,QAAQ,qBAInB/C,EAAOqC,GAAG,kBAAmB,SAASC,GAChC5B,EAAUC,UACZqC,gBAAgBV,EAAGtC,EAAQU,EAAUC,YASzCX,EAAOqC,GAAG,QAAS,uBAAwB,SAASC,GAClD,IAAIW,EAAc9C,EAAEqC,MAAMU,KAAK,cAE/BF,gBAAgBV,EAAGtC,EAAQU,EAAUuC,MAGvCjD,EAAOqC,GAAG,QAAS,uBAAwB,SAASC,GAIlDU,gBAAgBV,EAAGtC,EAAQU,EAAUC,YAGvCX,EAAOqC,GAAG,QAAS,SAASC,GACV,KAAZA,EAAEa,OACJnD,EAAO+C,QAAQ,qBASnB5C,EAAEF,EAAQmD,WAAWC,OAAOrD,GAE5BA,EAAOc,OACL6B,WAAU1C,EAAQ0C,UAAW,SAC7BW,UAAU,EACVC,MAAM,IAGJtD,EAAQsD,MACVvD,EAAOc,MAAM,QAuBRd","file":"../dialog.js","sourcesContent":["define([\r\n\t\"skylark-langx/langx\",\r\n\t\"./modals\"\r\n],function(langx,modals){\r\n\r\n  function dialog(options) {\r\n    options = sanitize(options);\r\n\r\n    var dialog = $(templates.dialog);\r\n    var innerDialog = dialog.find(\".modal-dialog\");\r\n    var body = dialog.find(\".modal-body\");\r\n    var buttons = options.buttons;\r\n    var buttonStr = \"\";\r\n    var callbacks = {\r\n      onEscape: options.onEscape\r\n    };\r\n\r\n    if ($.fn.modal === undefined) {\r\n      throw new Error(\r\n        \"$.fn.modal is not defined; please double check you have included \" +\r\n        \"the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ \" +\r\n        \"for more details.\"\r\n      );\r\n    }\r\n\r\n    each(buttons, function(key, button) {\r\n\r\n      // @TODO I don't like this string appending to itself; bit dirty. Needs reworking\r\n      // can we just build up button elements instead? slower but neater. Then button\r\n      // can just become a template too\r\n      buttonStr += \"<button data-bb-handler='\" + key + \"' type='button' class='btn \" + button.className + \"'>\" + button.label + \"</button>\";\r\n      callbacks[key] = button.callback;\r\n    });\r\n\r\n    body.find(\".modals-body\").html(options.message);\r\n\r\n    if (options.animate === true) {\r\n      dialog.addClass(\"fade\");\r\n    }\r\n\r\n    if (options.className) {\r\n      dialog.addClass(options.className);\r\n    }\r\n\r\n    if (options.size === \"large\") {\r\n      innerDialog.addClass(\"modal-lg\");\r\n    } else if (options.size === \"small\") {\r\n      innerDialog.addClass(\"modal-sm\");\r\n    }\r\n\r\n    if (options.title) {\r\n      body.before(templates.header);\r\n    }\r\n\r\n    if (options.closeButton) {\r\n      var closeButton = $(templates.closeButton);\r\n\r\n      if (options.title) {\r\n        dialog.find(\".modal-header\").prepend(closeButton);\r\n      } else {\r\n        closeButton.css(\"margin-top\", \"-10px\").prependTo(body);\r\n      }\r\n    }\r\n\r\n    if (options.title) {\r\n      dialog.find(\".modal-title\").html(options.title);\r\n    }\r\n\r\n    if (buttonStr.length) {\r\n      body.after(templates.footer);\r\n      dialog.find(\".modal-footer\").html(buttonStr);\r\n    }\r\n\r\n\r\n    /**\r\n     * Bootstrap event listeners; used handle extra\r\n     * setup & teardown required after the underlying\r\n     * modal has performed certain actions\r\n     */\r\n\r\n    dialog.on(\"hidden.bs.modal\", function(e) {\r\n      // ensure we don't accidentally intercept hidden events triggered\r\n      // by children of the current dialog. We shouldn't anymore now BS\r\n      // namespaces its events; but still worth doing\r\n      if (e.target === this) {\r\n        dialog.remove();\r\n      }\r\n    });\r\n\r\n    /*\r\n    dialog.on(\"show.bs.modal\", function() {\r\n      // sadly this doesn't work; show is called *just* before\r\n      // the backdrop is added so we'd need a setTimeout hack or\r\n      // otherwise... leaving in as would be nice\r\n      if (options.backdrop) {\r\n        dialog.next(\".modal-backdrop\").addClass(\"modals-backdrop\");\r\n      }\r\n    });\r\n    */\r\n\r\n    dialog.on(\"shown.bs.modal\", function() {\r\n      dialog.find(\".btn-primary:first\").focus();\r\n    });\r\n\r\n    /**\r\n     * modals event listeners; experimental and may not last\r\n     * just an attempt to decouple some behaviours from their\r\n     * respective triggers\r\n     */\r\n\r\n    if (options.backdrop !== \"static\") {\r\n      // A boolean true/false according to the Bootstrap docs\r\n      // should show a dialog the user can dismiss by clicking on\r\n      // the background.\r\n      // We always only ever pass static/false to the actual\r\n      // $.modal function because with `true` we can't trap\r\n      // this event (the .modal-backdrop swallows it)\r\n      // However, we still want to sort of respect true\r\n      // and invoke the escape mechanism instead\r\n      dialog.on(\"click.dismiss.bs.modal\", function(e) {\r\n        // @NOTE: the target varies in >= 3.3.x releases since the modal backdrop\r\n        // moved *inside* the outer dialog rather than *alongside* it\r\n        if (dialog.children(\".modal-backdrop\").length) {\r\n          e.currentTarget = dialog.children(\".modal-backdrop\").get(0);\r\n        }\r\n\r\n        if (e.target !== e.currentTarget) {\r\n          return;\r\n        }\r\n\r\n        dialog.trigger(\"escape.close.bb\");\r\n      });\r\n    }\r\n\r\n    dialog.on(\"escape.close.bb\", function(e) {\r\n      if (callbacks.onEscape) {\r\n        processCallback(e, dialog, callbacks.onEscape);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Standard jQuery event listeners; used to handle user\r\n     * interaction with our dialog\r\n     */\r\n\r\n    dialog.on(\"click\", \".modal-footer button\", function(e) {\r\n      var callbackKey = $(this).data(\"bb-handler\");\r\n\r\n      processCallback(e, dialog, callbacks[callbackKey]);\r\n    });\r\n\r\n    dialog.on(\"click\", \".modals-close-button\", function(e) {\r\n      // onEscape might be falsy but that's fine; the fact is\r\n      // if the user has managed to click the close button we\r\n      // have to close the dialog, callback or not\r\n      processCallback(e, dialog, callbacks.onEscape);\r\n    });\r\n\r\n    dialog.on(\"keyup\", function(e) {\r\n      if (e.which === 27) {\r\n        dialog.trigger(\"escape.close.bb\");\r\n      }\r\n    });\r\n\r\n    // the remainder of this method simply deals with adding our\r\n    // dialogent to the DOM, augmenting it with Bootstrap's modal\r\n    // functionality and then giving the resulting object back\r\n    // to our caller\r\n\r\n    $(options.container).append(dialog);\r\n\r\n    dialog.modal({\r\n      backdrop: options.backdrop ? \"static\": false,\r\n      keyboard: false,\r\n      show: false\r\n    });\r\n\r\n    if (options.show) {\r\n      dialog.modal(\"show\");\r\n    }\r\n\r\n    // @TODO should we return the raw element here or should\r\n    // we wrap it in an object on which we can expose some neater\r\n    // methods, e.g. var d = modals.alert(); d.hide(); instead\r\n    // of d.modal(\"hide\");\r\n\r\n   /*\r\n    function BBDialog(elem) {\r\n      this.elem = elem;\r\n    }\r\n\r\n    BBDialog.prototype = {\r\n      hide: function() {\r\n        return this.elem.modal(\"hide\");\r\n      },\r\n      show: function() {\r\n        return this.elem.modal(\"show\");\r\n      }\r\n    };\r\n    */\r\n\r\n    return dialog;\r\n\r\n  };\r\n\r\n\r\n  return modals.dialog = dialog;\r\n});"]}