{"version":3,"sources":["prompt.js"],"names":["define","langx","$","modals","templates","prompt","options","defaults","dialog","form","input","shouldShow","inputOptions","className","buttons","createLabels","value","inputType","undefined","validateButtons","mergeArguments","arguments","show","message","cancel","callback","onEscape","call","this","confirm","val","checkedItems","find","each","_","item","push","title","Error","isFunction","inputs","groups","isArray","length","option","elem","text","group","attr","append","values","checkbox","prop","placeholder","pattern","maxlength","on","e","preventDefault","stopPropagation","click","off","focus","modal"],"mappings":"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","file":"../prompt.js","sourcesContent":["define([\r\n\t\"skylark-langx/langx\",\r\n  \"skylark-domx/query\",\r\n\t\"./modals\",\r\n  \"./templates\"\r\n],function(langx,$,modals,templates){\r\n\r\n  function prompt() {\r\n    var options;\r\n    var defaults;\r\n    var dialog;\r\n    var form;\r\n    var input;\r\n    var shouldShow;\r\n    var inputOptions;\r\n\r\n    // we have to create our form first otherwise\r\n    // its value is undefined when gearing up our options\r\n    // @TODO this could be solved by allowing message to\r\n    // be a function instead...\r\n    form = $(templates.form);\r\n\r\n    // prompt defaults are more complex than others in that\r\n    // users can override more defaults\r\n    // @TODO I don't like that prompt has to do a lot of heavy\r\n    // lifting which mergeDialogOptions can *almost* support already\r\n    // just because of 'value' and 'inputType' - can we refactor?\r\n    defaults = {\r\n      className: \"modals-prompt\",\r\n      buttons: createLabels(\"cancel\", \"confirm\"),\r\n      value: \"\",\r\n      inputType: \"text\"\r\n    };\r\n\r\n    options = validateButtons(\r\n      mergeArguments(defaults, arguments, [\"title\", \"callback\"]),\r\n      [\"cancel\", \"confirm\"]\r\n    );\r\n\r\n    // capture the user's show value; we always set this to false before\r\n    // spawning the dialog to give us a chance to attach some handlers to\r\n    // it, but we need to make sure we respect a preference not to show it\r\n    shouldShow = (options.show === undefined) ? true : options.show;\r\n\r\n    /**\r\n     * overrides; undo anything the user tried to set they shouldn't have\r\n     */\r\n    options.message = form;\r\n\r\n    options.buttons.cancel.callback = options.onEscape = function() {\r\n      return options.callback.call(this, null);\r\n    };\r\n\r\n    options.buttons.confirm.callback = function() {\r\n      var value;\r\n\r\n      switch (options.inputType) {\r\n        case \"text\":\r\n        case \"textarea\":\r\n        case \"email\":\r\n        case \"select\":\r\n        case \"date\":\r\n        case \"time\":\r\n        case \"number\":\r\n        case \"password\":\r\n          value = input.val();\r\n          break;\r\n\r\n        case \"checkbox\":\r\n          var checkedItems = input.find(\"input:checked\");\r\n\r\n          // we assume that checkboxes are always multiple,\r\n          // hence we default to an empty array\r\n          value = [];\r\n\r\n          each(checkedItems, function(_, item) {\r\n            value.push($(item).val());\r\n          });\r\n          break;\r\n      }\r\n\r\n      return options.callback.call(this, value);\r\n    };\r\n\r\n    options.show = false;\r\n\r\n    // prompt specific validation\r\n    if (!options.title) {\r\n      throw new Error(\"prompt requires a title\");\r\n    }\r\n\r\n    if (!langx.isFunction(options.callback)) {\r\n      throw new Error(\"prompt requires a callback\");\r\n    }\r\n\r\n    if (!templates.inputs[options.inputType]) {\r\n      throw new Error(\"invalid prompt type\");\r\n    }\r\n\r\n    // create the input based on the supplied type\r\n    input = $(templates.inputs[options.inputType]);\r\n\r\n    switch (options.inputType) {\r\n      case \"text\":\r\n      case \"textarea\":\r\n      case \"email\":\r\n      case \"date\":\r\n      case \"time\":\r\n      case \"number\":\r\n      case \"password\":\r\n        input.val(options.value);\r\n        break;\r\n\r\n      case \"select\":\r\n        var groups = {};\r\n        inputOptions = options.inputOptions || [];\r\n\r\n        if (!langx.isArray(inputOptions)) {\r\n          throw new Error(\"Please pass an array of input options\");\r\n        }\r\n\r\n        if (!inputOptions.length) {\r\n          throw new Error(\"prompt with select requires options\");\r\n        }\r\n\r\n        each(inputOptions, function(_, option) {\r\n\r\n          // assume the element to attach to is the input...\r\n          var elem = input;\r\n\r\n          if (option.value === undefined || option.text === undefined) {\r\n            throw new Error(\"given options in wrong format\");\r\n          }\r\n\r\n          // ... but override that element if this option sits in a group\r\n\r\n          if (option.group) {\r\n            // initialise group if necessary\r\n            if (!groups[option.group]) {\r\n              groups[option.group] = $(\"<optgroup/>\").attr(\"label\", option.group);\r\n            }\r\n\r\n            elem = groups[option.group];\r\n          }\r\n\r\n          elem.append(\"<option value='\" + option.value + \"'>\" + option.text + \"</option>\");\r\n        });\r\n\r\n        each(groups, function(_, group) {\r\n          input.append(group);\r\n        });\r\n\r\n        // safe to set a select's value as per a normal input\r\n        input.val(options.value);\r\n        break;\r\n\r\n      case \"checkbox\":\r\n        var values   = langx.isArray(options.value) ? options.value : [options.value];\r\n        inputOptions = options.inputOptions || [];\r\n\r\n        if (!inputOptions.length) {\r\n          throw new Error(\"prompt with checkbox requires options\");\r\n        }\r\n\r\n        if (!inputOptions[0].value || !inputOptions[0].text) {\r\n          throw new Error(\"given options in wrong format\");\r\n        }\r\n\r\n        // checkboxes have to nest within a containing element, so\r\n        // they break the rules a bit and we end up re-assigning\r\n        // our 'input' element to this container instead\r\n        input = $(\"<div/>\");\r\n\r\n        each(inputOptions, function(_, option) {\r\n          var checkbox = $(templates.inputs[options.inputType]);\r\n\r\n          checkbox.find(\"input\").attr(\"value\", option.value);\r\n          checkbox.find(\"label\").append(option.text);\r\n\r\n          // we've ensured values is an array so we can always iterate over it\r\n          each(values, function(_, value) {\r\n            if (value === option.value) {\r\n              checkbox.find(\"input\").prop(\"checked\", true);\r\n            }\r\n          });\r\n\r\n          input.append(checkbox);\r\n        });\r\n        break;\r\n    }\r\n\r\n    // @TODO provide an attributes option instead\r\n    // and simply map that as keys: vals\r\n    if (options.placeholder) {\r\n      input.attr(\"placeholder\", options.placeholder);\r\n    }\r\n\r\n    if (options.pattern) {\r\n      input.attr(\"pattern\", options.pattern);\r\n    }\r\n\r\n    if (options.maxlength) {\r\n      input.attr(\"maxlength\", options.maxlength);\r\n    }\r\n\r\n    // now place it in our form\r\n    form.append(input);\r\n\r\n    form.on(\"submit\", function(e) {\r\n      e.preventDefault();\r\n      // Fix for SammyJS (or similar JS routing library) hijacking the form post.\r\n      e.stopPropagation();\r\n      // @TODO can we actually click *the* button object instead?\r\n      // e.g. buttons.confirm.click() or similar\r\n      dialog.find(\".btn-primary\").click();\r\n    });\r\n\r\n    dialog = modals.dialog(options);\r\n\r\n    // clear the existing handler focusing the submit button...\r\n    dialog.off(\"shown.bs.modal\");\r\n\r\n    // ...and replace it with one focusing our input, if possible\r\n    dialog.on(\"shown.bs.modal\", function() {\r\n      // need the closure here since input isn't\r\n      // an object otherwise\r\n      input.focus();\r\n    });\r\n\r\n    if (shouldShow === true) {\r\n      dialog.modal(\"show\");\r\n    }\r\n\r\n    return dialog;\r\n  }\r\n\r\n\r\n  return modals.prompt = prompt;\r\n});"]}